diff -Nur chmsee-1.3.1.1/CMakeLists.txt chmsee-1.3.1.1.n/CMakeLists.txt
--- chmsee-1.3.1.1/CMakeLists.txt	2011-01-16 21:48:42.000000000 +0800
+++ chmsee-1.3.1.1.n/CMakeLists.txt	2011-01-27 13:56:57.000000000 +0800
@@ -8,12 +8,12 @@
 find_package(PkgConfig)
 
 pkg_check_modules (CHMSEE REQUIRED gthread-2.0>=2.22 glib-2.0>=2.22 libxml-2.0 gtk+-2.0>=2.18 nspr)
-pkg_search_module(XULRUNNER REQUIRED mozilla-gtkmozembed-embedding>=1.9 xulrunner-gtkmozembed>=1.9)
+pkg_search_module(WEBKIT REQUIRED webkit-1.0)
 
-set(CHMSEE_INCLUDE_DIRS ${CHMSEE_INCLUDE_DIRS} ${XULRUNNER_INCLUDE_DIRS})
-set(CHMSEE_CFLAGS_OTHER ${CHMSEE_CFLAGS_OTHER} ${XULRUNNER_CFLAGS_OTHER} -Wall)
-set(CHMSEE_LIBRARY_DIRS ${CHMSEE_LIBRARY_DIRS} ${XULRUNNER_LIBRARY_DIRS})
-set(CHMSEE_LIBRARIES ${CHMSEE_LIBRARIES} ${XULRUNNER_LIBRARIES} chm gcrypt)
+set(CHMSEE_INCLUDE_DIRS ${CHMSEE_INCLUDE_DIRS} ${WEBKIT_INCLUDE_DIRS})
+set(CHMSEE_CFLAGS_OTHER ${CHMSEE_CFLAGS_OTHER} ${WEBKIT_CFLAGS_OTHER} -Wall)
+set(CHMSEE_LIBRARY_DIRS ${CHMSEE_LIBRARY_DIRS} ${WEBKIT_LIBRARY_DIRS})
+set(CHMSEE_LIBRARIES ${CHMSEE_LIBRARIES} ${WEBKIT_LIBRARIES} chm gcrypt)
 
 set(CHMSEE_CONFIG_FILE "config")
 set(CHMSEE_BOOKMARKS_FILE "chmsee_bookmarks")
diff -Nur chmsee-1.3.1.1/src/chmsee.c chmsee-1.3.1.1.n/src/chmsee.c
--- chmsee-1.3.1.1/src/chmsee.c	2011-01-16 21:48:42.000000000 +0800
+++ chmsee-1.3.1.1.n/src/chmsee.c	2011-01-27 13:56:57.000000000 +0800
@@ -44,7 +44,7 @@
 #include "link.h"
 #include "utils.h"
 #include "components/book.h"
-#include "components/html-gecko.h"
+#include "components/html-webkit.h"
 #include "models/chmfile.h"
 
 typedef struct _ChmseePrivate ChmseePrivate;
@@ -282,7 +282,7 @@
                          self);
 
         /* start up html render engine */
-        if(!cs_html_gecko_init_system()) {
+        if(!cs_html_webkit_init_system()) {
                 g_error("Initialize html render engine failed!");
                 exit(1);
         }
@@ -624,8 +624,8 @@
                          NULL);
 
         gtk_about_dialog_set_version(GTK_ABOUT_DIALOG (dialog), PACKAGE_VERSION);
-        gtk_about_dialog_set_comments(GTK_ABOUT_DIALOG (dialog),
-                                      _("(Build with xulrunner " XULRUNNER_VERSION ")"));
+//        gtk_about_dialog_set_comments(GTK_ABOUT_DIALOG (dialog),
+  //                                    _("(Build with xulrunner " XULRUNNER_VERSION ")"));
 
         g_object_unref(builder);
 }
@@ -679,7 +679,7 @@
 
         ChmseePrivate *priv = CHMSEE_GET_PRIVATE (self);
 
-        cs_html_gecko_shutdown_system();
+        cs_html_webkit_shutdown_system();
         priv->config->hpaned_pos = cs_book_get_hpaned_position(CS_BOOK (priv->book));
         gtk_widget_destroy(GTK_WIDGET (self));
 
@@ -1028,7 +1028,7 @@
         ChmseePrivate *priv = CHMSEE_GET_PRIVATE (self);
 
         if (priv->chmfile != NULL) {
-                cs_html_gecko_set_variable_font(font_name);
+//                cs_html_webkit_set_variable_font(font_name);
                 cs_chmfile_set_variable_font(priv->chmfile, font_name);
         } else {
                 g_free(priv->config->variable_font);
@@ -1057,7 +1057,7 @@
         ChmseePrivate *priv = CHMSEE_GET_PRIVATE (self);
 
         if (priv->chmfile != NULL) {
-                cs_html_gecko_set_fixed_font(font_name);
+        ///        cs_html_webkit_set_fixed_font(font_name);
                 cs_chmfile_set_fixed_font(priv->chmfile, font_name);
         } else {
                 g_free(priv->config->fixed_font);
diff -Nur chmsee-1.3.1.1/src/CMakeLists.txt chmsee-1.3.1.1.n/src/CMakeLists.txt
--- chmsee-1.3.1.1/src/CMakeLists.txt	2011-01-16 21:48:42.000000000 +0800
+++ chmsee-1.3.1.1.n/src/CMakeLists.txt	2011-01-27 13:56:57.000000000 +0800
@@ -23,8 +23,7 @@
         components/index.h components/index.c
         components/bookmarks.h components/bookmarks.c
         components/treeview.h components/treeview.c
-        components/html-gecko.h components/html-gecko.c
-        components/gecko-utils.h components/gecko-utils.cpp
+        components/html-webkit.h components/html-webkit.c
         )
 set(CHMSEE_SRCS
         ${CHMSEE_SRCS}
diff -Nur chmsee-1.3.1.1/src/components/book.c chmsee-1.3.1.1.n/src/components/book.c
--- chmsee-1.3.1.1/src/components/book.c	2011-01-16 21:48:42.000000000 +0800
+++ chmsee-1.3.1.1.n/src/components/book.c	2011-01-27 13:56:57.000000000 +0800
@@ -24,13 +24,12 @@
 #include <stdlib.h>
 #include <string.h>
 #include <glib.h>
-#include <gtkmozembed.h>
 
 #include "book.h"
 #include "toc.h"
 #include "bookmarks.h"
 #include "index.h"
-#include "html-gecko.h"
+#include "html-webkit.h"
 #include "utils.h"
 #include "models/chmfile.h"
 #include "models/link.h"
@@ -67,7 +66,7 @@
         GtkUIManager    *ui_manager;
 
         CsChmfile       *model;
-        CsHtmlGecko     *active_html;
+        CsHtmlWebkit     *active_html;
 
         gchar           *context_menu_link;
         gchar           *book_message;
@@ -86,13 +85,13 @@
 static void find_entry_activate_cb(GtkEntry *, CsBook *);
 static void link_selected_cb(GtkWidget *, Link *, CsBook *);
 static void html_notebook_switch_page_cb(GtkNotebook *, GtkNotebookPage *, guint , CsBook *);
-static void html_location_changed_cb(CsHtmlGecko *, const gchar *, CsBook *);
-static gboolean html_open_uri_cb(CsHtmlGecko *, const gchar *, CsBook *);
-static void html_title_changed_cb(CsHtmlGecko *, const gchar *, CsBook *);
-static void html_context_normal_cb(CsHtmlGecko *, CsBook *);
-static void html_context_link_cb(CsHtmlGecko *, const gchar *, CsBook *);
-static void html_open_new_tab_cb(CsHtmlGecko *, const gchar *, CsBook *);
-static void html_link_message_cb(CsHtmlGecko *, const gchar *, CsBook *);
+static void html_location_changed_cb(CsHtmlWebkit *, const gchar *, CsBook *);
+static gboolean html_open_uri_cb(CsHtmlWebkit *, const gchar *, CsBook *);
+static void html_title_changed_cb(CsHtmlWebkit *, const gchar *, CsBook *);
+static void html_context_normal_cb(CsHtmlWebkit *, CsBook *);
+static void html_context_link_cb(CsHtmlWebkit *, const gchar *, CsBook *);
+static void html_open_new_tab_cb(CsHtmlWebkit *, const gchar *, CsBook *);
+static void html_link_message_cb(CsHtmlWebkit *, const gchar *, CsBook *);
 
 static void on_tab_close(GtkWidget *, CsBook *);
 static void on_copy(GtkAction *, CsBook *);
@@ -109,7 +108,7 @@
 static void update_book_message(CsBook *, const gchar *);
 static gint new_html_tab(CsBook *);
 static GtkWidget *new_tab_label(CsBook *, const gchar *);
-static void update_tab_title(CsBook *, CsHtmlGecko *, const gchar *);
+static void update_tab_title(CsBook *, CsHtmlWebkit *, const gchar *);
 static void update_tab_label_state(CsBook *);
 static void set_context_menu_link(CsBook *, const gchar *);
 static void find_text(GtkWidget *, CsBook *, gboolean);
@@ -388,7 +387,7 @@
 
         if (new_page != NULL) {
                 g_debug("CS_BOOK >>> switch page callback, set active_html = %p", priv->active_html);
-                priv->active_html = CS_HTML_GECKO (new_page);
+                priv->active_html = CS_HTML_WEBKIT (new_page);
                 cs_book_reload_current_page(self);
         }
 
@@ -396,7 +395,7 @@
 }
 
 static void
-html_location_changed_cb(CsHtmlGecko *html, const gchar *location, CsBook *self)
+html_location_changed_cb(CsHtmlWebkit *html, const gchar *location, CsBook *self)
 {
         g_debug("CS_BOOK >>> html location changed cb: %s", location);
 
@@ -422,7 +421,7 @@
 }
 
 static gboolean
-html_open_uri_cb(CsHtmlGecko *html, const gchar *full_uri, CsBook *self)
+html_open_uri_cb(CsHtmlWebkit *html, const gchar *full_uri, CsBook *self)
 {
         g_debug("CS_BOOK >>> enter html_open_uri_cb with uri = %s", full_uri);
         if (full_uri == NULL || strlen(full_uri) == 0)
@@ -455,7 +454,7 @@
 }
 
 static void
-html_title_changed_cb(CsHtmlGecko *html, const gchar *title, CsBook *self)
+html_title_changed_cb(CsHtmlWebkit *html, const gchar *title, CsBook *self)
 {
         g_debug("CS_BOOK >>> html title changed cb title = %s", title);
 
@@ -469,7 +468,7 @@
         update_tab_title(self, html, label_text);
 
         /* update bookmarks title entry */
-        gchar *location = cs_html_gecko_get_location(html);
+        gchar *location = cs_html_webkit_get_location(html);
 
         if (location != NULL && strlen(location)) {
                 if (!g_str_has_prefix(location, "about:")) {
@@ -485,13 +484,13 @@
 }
 
 static void
-html_context_normal_cb(CsHtmlGecko *html, CsBook *self)
+html_context_normal_cb(CsHtmlWebkit *html, CsBook *self)
 {
         g_debug("CS_BOOK >>> html context-normal event");
 
         CsBookPrivate *priv = CS_BOOK_GET_PRIVATE (self);
 
-        gboolean can_copy = cs_html_gecko_can_copy_selection(priv->active_html);
+        gboolean can_copy = cs_html_webkit_can_copy_selection(priv->active_html);
         gtk_action_set_sensitive(gtk_action_group_get_action(priv->action_group, "Copy"),
                                  can_copy);
         gtk_action_set_sensitive(gtk_action_group_get_action(priv->action_group, "Back"),
@@ -505,7 +504,7 @@
 }
 
 static void
-html_context_link_cb(CsHtmlGecko *html, const gchar *link, CsBook *self)
+html_context_link_cb(CsHtmlWebkit *html, const gchar *link, CsBook *self)
 {
         g_debug("CS_BOOK >>> html context-link event: %s", link);
 
@@ -520,14 +519,14 @@
 }
 
 static void
-html_open_new_tab_cb(CsHtmlGecko *html, const gchar *location, CsBook *self)
+html_open_new_tab_cb(CsHtmlWebkit *html, const gchar *location, CsBook *self)
 {
         g_debug("CS_BOOK >>> html open new tab callback: %s", location);
         cs_book_new_tab_with_fulluri(self, location);
 }
 
 static void
-html_link_message_cb(CsHtmlGecko *html, const gchar *url, CsBook *self)
+html_link_message_cb(CsHtmlWebkit *html, const gchar *url, CsBook *self)
 {
         update_book_message(self, url);
 }
@@ -559,7 +558,7 @@
 static void
 on_copy_page_location(GtkAction *action, CsBook *self)
 {
-        gchar *location = cs_html_gecko_get_location(CS_BOOK_GET_PRIVATE (self)->active_html);
+        gchar *location = cs_html_webkit_get_location(CS_BOOK_GET_PRIVATE (self)->active_html);
         GdkAtom selection = location != NULL ? GDK_SELECTION_PRIMARY : GDK_SELECTION_CLIPBOARD;
         gtk_clipboard_set_text(gtk_clipboard_get(selection), location, -1);
         g_free(location);
@@ -674,7 +673,7 @@
 
         CsBookPrivate *priv = CS_BOOK_GET_PRIVATE (self);
 
-        GtkWidget *html = cs_html_gecko_new();
+        GtkWidget *html = cs_html_webkit_new();
         gtk_widget_show(html);
 
         g_signal_connect(G_OBJECT (html),
@@ -759,7 +758,7 @@
 }
 
 static void
-update_tab_title(CsBook *self, CsHtmlGecko *html, const gchar *title)
+update_tab_title(CsBook *self, CsHtmlWebkit *html, const gchar *title)
 {
         g_debug("CS_BOOK >>> update tab title = %s", title);
         GtkWidget *widget = gtk_notebook_get_tab_label(GTK_NOTEBOOK (CS_BOOK_GET_PRIVATE (self)->html_notebook),
@@ -788,14 +787,14 @@
         const gchar *text = gtk_entry_get_text(GTK_ENTRY (find_entry));
 
         if (GTK_IS_BUTTON (widget) && backward && mcase) {
-                if (g_str_has_prefix(text, "gecko:about:")) {
-                    g_debug("CS_BOOK >>> call Gecko about: protocol = %s", text);
-                    cs_html_gecko_load_url(priv->active_html, text+6);
+                if (g_str_has_prefix(text, "webkit:about:")) {
+                    g_debug("CS_BOOK >>> call Webkit about: protocol = %s", text);
+                    cs_html_webkit_load_url(priv->active_html, text+6);
                     return;
                 }
         }
 
-        cs_html_gecko_find(priv->active_html, text, backward, mcase);
+        cs_html_webkit_find(priv->active_html, text, backward, mcase);
 }
 
 static void
@@ -836,7 +835,7 @@
         CsBookPrivate *priv = CS_BOOK_GET_PRIVATE (self);
 
         GList *toc_list = cs_chmfile_get_toc_list(priv->model);
-        gchar *location = cs_html_gecko_get_location(priv->active_html);
+        gchar *location = cs_html_webkit_get_location(priv->active_html);
         const gchar *short_uri = get_short_uri(priv->model, location);
         GList *current = g_list_find_custom(toc_list, short_uri, uri_compare);
         g_free(location);
@@ -884,8 +883,8 @@
 
         priv->model = g_object_ref(model);
 
-        cs_html_gecko_set_variable_font(cs_chmfile_get_variable_font(model));
-        cs_html_gecko_set_fixed_font(cs_chmfile_get_fixed_font(model));
+        cs_html_webkit_set_variable_font(CS_BOOK_GET_PRIVATE (self)->active_html,cs_chmfile_get_variable_font(model));
+        cs_html_webkit_set_fixed_font(CS_BOOK_GET_PRIVATE (self)->active_html,cs_chmfile_get_fixed_font(model));
 
         gint cur_page = 0;
 
@@ -997,15 +996,15 @@
         }
 
         if (file_exist) {
-                gchar *location = cs_html_gecko_get_location(priv->active_html);
+                gchar *location = cs_html_webkit_get_location(priv->active_html);
                 if (force_reload || g_strcmp0(full_uri, location)) {
                         /* set user specified charset */
                         const gchar *charset = cs_chmfile_get_charset(CS_CHMFILE (priv->model));
                         if (charset && strlen(charset))
-                                cs_html_gecko_set_charset(priv->active_html, charset);
+                                cs_html_webkit_set_charset(priv->active_html, charset);
 
                         g_signal_handlers_block_by_func(priv->active_html, html_open_uri_cb, self);
-                        cs_html_gecko_load_url(priv->active_html, full_uri);
+                        cs_html_webkit_load_url(priv->active_html, full_uri);
                         g_signal_handlers_unblock_by_func(priv->active_html, html_open_uri_cb, self);
                 }
                 g_free(location);
@@ -1097,8 +1096,8 @@
         if (priv->model != NULL) {
                 const gchar *charset = cs_chmfile_get_charset(CS_CHMFILE (priv->model));
                 if (charset && strlen(charset))
-                        cs_html_gecko_set_charset(priv->active_html, charset);
-                cs_html_gecko_reload(priv->active_html);
+                        cs_html_webkit_set_charset(priv->active_html, charset);
+                cs_html_webkit_reload(priv->active_html);
         }
 }
 
@@ -1126,7 +1125,7 @@
 {
         g_return_val_if_fail(IS_CS_BOOK (self), FALSE);
 
-        return cs_html_gecko_can_go_back(CS_BOOK_GET_PRIVATE (self)->active_html);
+        return cs_html_webkit_can_go_back(CS_BOOK_GET_PRIVATE (self)->active_html);
 }
 
 gboolean
@@ -1134,7 +1133,7 @@
 {
         g_return_val_if_fail(IS_CS_BOOK (self), FALSE);
 
-        return cs_html_gecko_can_go_forward(CS_BOOK_GET_PRIVATE (self)->active_html);
+        return cs_html_webkit_can_go_forward(CS_BOOK_GET_PRIVATE (self)->active_html);
 }
 
 void
@@ -1142,7 +1141,7 @@
 {
         g_return_if_fail(IS_CS_BOOK (self));
 
-        cs_html_gecko_go_back(CS_BOOK_GET_PRIVATE (self)->active_html);
+        cs_html_webkit_go_back(CS_BOOK_GET_PRIVATE (self)->active_html);
 }
 
 void
@@ -1150,7 +1149,7 @@
 {
         g_return_if_fail(IS_CS_BOOK (self));
 
-        cs_html_gecko_go_forward(CS_BOOK_GET_PRIVATE (self)->active_html);
+        cs_html_webkit_go_forward(CS_BOOK_GET_PRIVATE (self)->active_html);
 }
 
 void
@@ -1186,7 +1185,7 @@
 {
         g_return_if_fail(IS_CS_BOOK (self));
 
-        cs_html_gecko_increase_size(CS_BOOK_GET_PRIVATE (self)->active_html);
+        cs_html_webkit_increase_size(CS_BOOK_GET_PRIVATE (self)->active_html);
 }
 
 void
@@ -1194,7 +1193,7 @@
 {
         g_return_if_fail(IS_CS_BOOK (self));
 
-        cs_html_gecko_decrease_size(CS_BOOK_GET_PRIVATE (self)->active_html);
+        cs_html_webkit_decrease_size(CS_BOOK_GET_PRIVATE (self)->active_html);
 }
 
 void
@@ -1202,7 +1201,7 @@
 {
         g_return_if_fail(IS_CS_BOOK (self));
 
-        cs_html_gecko_reset_size(CS_BOOK_GET_PRIVATE (self)->active_html);
+        cs_html_webkit_reset_size(CS_BOOK_GET_PRIVATE (self)->active_html);
 }
 
 gboolean
@@ -1213,7 +1212,7 @@
         CsBookPrivate *priv = CS_BOOK_GET_PRIVATE (self);
 
         if (priv->active_html != NULL)
-                return cs_html_gecko_can_copy_selection(priv->active_html);
+                return cs_html_webkit_can_copy_selection(priv->active_html);
         else
                 return FALSE;
 }
@@ -1223,7 +1222,7 @@
 {
         g_return_if_fail(IS_CS_BOOK (self));
 
-        cs_html_gecko_copy_selection(CS_BOOK_GET_PRIVATE (self)->active_html);
+        cs_html_webkit_copy_selection(CS_BOOK_GET_PRIVATE (self)->active_html);
 }
 
 void
@@ -1231,7 +1230,7 @@
 {
         g_return_if_fail(IS_CS_BOOK (self));
 
-        cs_html_gecko_select_all(CS_BOOK_GET_PRIVATE (self)->active_html);
+        cs_html_webkit_select_all(CS_BOOK_GET_PRIVATE (self)->active_html);
 }
 
 gchar *
@@ -1239,7 +1238,7 @@
 {
         g_return_val_if_fail(IS_CS_BOOK (self), NULL);
 
-        return cs_html_gecko_get_location(CS_BOOK_GET_PRIVATE (self)->active_html);
+        return cs_html_webkit_get_location(CS_BOOK_GET_PRIVATE (self)->active_html);
 }
 
 int
diff -Nur chmsee-1.3.1.1/src/components/gecko-utils.cpp chmsee-1.3.1.1.n/src/components/gecko-utils.cpp
--- chmsee-1.3.1.1/src/components/gecko-utils.cpp	2011-01-16 21:48:42.000000000 +0800
+++ chmsee-1.3.1.1.n/src/components/gecko-utils.cpp	1970-01-01 08:00:00.000000000 +0800
@@ -1,450 +0,0 @@
-/*
- *  Copyright (C) 2010 Ji YongGang <jungleji@gmail.com>
- *
- *  ChmSee is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2, or (at your option)
- *  any later version.
-
- *  ChmSee is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *  GNU General Public License for more details.
-
- *  You should have received a copy of the GNU General Public License
- *  along with ChmSee; see the file COPYING.  If not, write to
- *  the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
- *  Boston, MA 02110-1301, USA.
- */
-
-/*
- * Copyright (C) 2004 Imendio AB
- * Copyright (C) 2004 Marco Pesenti Gritti
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License as
- * published by the Free Software Foundation; either version 2 of the
- * License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * General Public License for more details.
- *
- * You should have received a copy of the GNU General Public
- * License along with this program; if not, write to the
- * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
- * Boston, MA 02111-1307, USA.
- *
- */
-
-#include "config.h"
-
-#include <stdlib.h>
-
-#include <gtkmozembed.h>
-#include <gtkmozembed_glue.cpp>
-#include <gtkmozembed_internal.h>
-
-#include <nsCOMPtr.h>
-#include <nsStringAPI.h>
-#include <nsILocalFile.h>
-#include <nsIPrefService.h>
-#include <nsICommandManager.h>
-#include <nsIDOMMouseEvent.h>
-#include <nsIWebBrowserChrome.h>
-
-// For zoom
-#include <nsIDOMWindow.h>
-// For copy and selectAll
-#include <nsIClipboardCommands.h>
-// For find
-#include <nsIWebBrowserFind.h>
-
-#include <nsServiceManagerUtils.h>
-#include <nsIInterfaceRequestorUtils.h>
-#include <nsComponentManagerUtils.h>
-
-#include <nsIDocCharset.h>
-
-#include "gecko-utils.h"
-#include "utils.h"
-
-static nsresult gecko_utils_init_prefs(void);
-static gboolean util_split_font_string(const gchar *, gchar **, gint *);
-static gboolean gecko_prefs_set_bool(const gchar *, gboolean);
-static gboolean gecko_prefs_set_string(const gchar *, const gchar *);
-static gboolean gecko_prefs_set_int(const gchar *, gint);
-
-static gboolean
-util_split_font_string(const gchar *font_name, gchar **name, gint *size)
-{
-        PangoFontDescription *desc;
-        PangoFontMask         mask;
-        gboolean              retval = FALSE;
-
-        if (font_name == NULL)
-                return FALSE;
-
-        mask = (PangoFontMask) (PANGO_FONT_MASK_FAMILY | PANGO_FONT_MASK_SIZE);
-
-        desc = pango_font_description_from_string(font_name);
-        if (!desc)
-                return FALSE;
-
-        if ((pango_font_description_get_set_fields(desc) & mask) == mask) {
-                *size = PANGO_PIXELS(pango_font_description_get_size(desc));
-                *name = g_strdup(pango_font_description_get_family(desc));
-
-                retval = TRUE;
-        }
-
-        pango_font_description_free(desc);
-
-        return retval;
-}
-
-static gboolean
-gecko_prefs_set_bool(const gchar *key, gboolean value)
-{
-        nsresult rv;
-        nsCOMPtr<nsIPrefService> prefService(do_GetService(NS_PREFSERVICE_CONTRACTID, &rv));
-        NS_ENSURE_SUCCESS (rv, FALSE);
-
-        nsCOMPtr<nsIPrefBranch> pref;
-        rv = prefService->GetBranch("", getter_AddRefs(pref));
-        NS_ENSURE_SUCCESS (rv, FALSE);
-
-        rv = pref->SetBoolPref(key, value);
-
-        return NS_SUCCEEDED (rv) != PR_FALSE;
-}
-
-static gboolean
-gecko_prefs_set_string(const gchar *key, const gchar *value)
-{
-        nsresult rv;
-        nsCOMPtr<nsIPrefService> prefService(do_GetService(NS_PREFSERVICE_CONTRACTID, &rv));
-        NS_ENSURE_SUCCESS (rv, FALSE);
-
-        nsCOMPtr<nsIPrefBranch> pref;
-        rv = prefService->GetBranch("", getter_AddRefs(pref));
-        NS_ENSURE_SUCCESS (rv, FALSE);
-
-        rv = pref->SetCharPref(key, value);
-
-        return NS_SUCCEEDED (rv) != PR_FALSE;
-}
-
-static gboolean
-gecko_prefs_set_int(const gchar *key, gint value)
-{
-        nsresult rv;
-        nsCOMPtr<nsIPrefService> prefService(do_GetService(NS_PREFSERVICE_CONTRACTID, &rv));
-        NS_ENSURE_SUCCESS (rv, FALSE);
-
-        nsCOMPtr<nsIPrefBranch> pref;
-        rv = prefService->GetBranch("", getter_AddRefs(pref));
-        NS_ENSURE_SUCCESS (rv, FALSE);
-
-        rv = pref->SetIntPref(key, value);
-
-        return NS_SUCCEEDED (rv) != PR_FALSE;
-}
-
-static nsresult
-gecko_utils_init_prefs(void)
-{
-        nsresult rv;
-
-        nsCOMPtr<nsIPrefService> prefService(do_GetService(NS_PREFSERVICE_CONTRACTID, &rv));
-        NS_ENSURE_SUCCESS (rv, rv);
-
-        nsCOMPtr<nsILocalFile> file;
-        rv = NS_NewNativeLocalFile(nsDependentCString(RESOURCE_FILE ("default-prefs.js")),
-                                   PR_TRUE, getter_AddRefs(file));
-        NS_ENSURE_SUCCESS (rv, rv);
-
-        rv  = prefService->ReadUserPrefs(file);
-        rv |= prefService->ReadUserPrefs(nsnull);
-
-        NS_ENSURE_SUCCESS (rv, rv);
-
-        return rv;
-}
-
-/* External functions */
-
-extern "C" gboolean
-gecko_utils_init(void)
-{
-        nsresult rv;
-
-        static const GREVersionRange greVersion = {
-                "1.9a", PR_TRUE,
-                "2.0.*", PR_TRUE
-        };
-
-        char xpcomLocation[PATH_MAX];
-
-        rv = GRE_GetGREPathWithProperties(&greVersion, 1, nsnull, 0,
-                                          xpcomLocation, sizeof(xpcomLocation));
-        if (NS_FAILED (rv)) {
-                g_warning("GECKO_UTILS >>> Couldn't find a compatible GRE!\n");
-                return FALSE;
-        }
-
-        // Startup the XPCOM Glue that links us up with XPCOM.
-        rv = XPCOMGlueStartup(xpcomLocation);
-        if (NS_FAILED (rv)) {
-                g_warning("GECKO_UTILS >>> Couldn't start XPCOM!\n");
-                return FALSE;
-        }
-
-        rv = GTKEmbedGlueStartup();
-        if (NS_FAILED (rv)) {
-                g_warning("GECKO_UTILS >>> Couldn't find GTKMozEmbed symbols!\n");
-                return FALSE;
-        }
-
-        rv = GTKEmbedGlueStartupInternal();
-        if (NS_FAILED (rv)) {
-                g_warning("GECKO_UTILS >>> Could not startup embed glue (internal)!\n");
-                return FALSE;
-        }
-
-        char *lastSlash = strrchr(xpcomLocation, '/');
-        if (lastSlash)
-                *lastSlash = '\0';
-
-        gtk_moz_embed_set_path(xpcomLocation);
-
-        /* gecko config directory, default location is ~/.config/chmsee/mozilla  */
-        gchar *profile_dir = g_build_filename(g_get_user_config_dir(),
-                                              PACKAGE,
-                                              NULL);
-
-        gtk_moz_embed_set_profile_path(profile_dir, "mozilla");
-        g_free(profile_dir);
-
-        gtk_moz_embed_push_startup();
-
-        gecko_utils_init_prefs();
-
-        g_debug("GECKO_UTILS >>> initialization finished.");
-        return TRUE;
-}
-
-extern "C" void
-gecko_utils_shutdown(void)
-{
-        gtk_moz_embed_pop_startup();
-}
-
-extern "C" gint
-gecko_utils_get_mouse_event_button(gpointer event)
-{
-        nsIDOMMouseEvent *aMouseEvent;
-        PRUint16          button;
-
-        aMouseEvent = (nsIDOMMouseEvent *) event;
-
-        aMouseEvent->GetButton(&button);
-
-        return button + 1;
-}
-
-extern "C" gint
-gecko_utils_get_mouse_event_modifiers(gpointer event)
-{
-        nsIDOMMouseEvent *aMouseEvent;
-        PRBool            ctrl, alt, shift, meta;
-        gint              mask;
-
-        aMouseEvent = (nsIDOMMouseEvent *) event;
-
-        aMouseEvent->GetCtrlKey(&ctrl);
-        aMouseEvent->GetAltKey(&alt);
-        aMouseEvent->GetShiftKey(&shift);
-        aMouseEvent->GetMetaKey(&meta);
-
-        mask = 0;
-        if (ctrl)
-                mask |= GDK_CONTROL_MASK;
-
-        if (alt || meta)
-                mask |= GDK_MOD1_MASK;
-
-        if (shift)
-                mask |= GDK_SHIFT_MASK;
-
-        return mask;
-}
-
-extern "C" void
-gecko_utils_set_font(gint type, const gchar *fontname)
-{
-        gchar *name;
-        gint   size;
-
-        name = NULL;
-
-        if (!util_split_font_string(fontname, &name, &size)) {
-                g_free(name);
-                return;
-        }
-
-        switch (type) {
-        case GECKO_PREF_FONT_VARIABLE:
-                gecko_prefs_set_string("font.name.variable.x-western", name);
-                gecko_prefs_set_int("font.size.variable.x-western", size);
-                break;
-        case GECKO_PREF_FONT_FIXED:
-                gecko_prefs_set_string("font.name.fixed.x-western", name);
-                gecko_prefs_set_int("font.size.fixed.x-western", size);
-                break;
-        }
-
-        g_free(name);
-}
-
-extern "C" gboolean
-gecko_utils_find(GtkMozEmbed *embed, const gchar *str, gboolean backward, gboolean match_case)
-{
-        g_debug("GECKO_UTILS >>> find string = %s", str);
-
-        nsCOMPtr<nsIWebBrowser> webBrowser;
-        gtk_moz_embed_get_nsIWebBrowser(embed, getter_AddRefs(webBrowser));
-
-        nsCOMPtr<nsIWebBrowserFind> finder = do_GetInterface(webBrowser);
-        if (finder) {
-                finder->SetFindBackwards(backward);
-                finder->SetMatchCase(match_case);
-                finder->SetWrapFind(PR_TRUE);
-
-                nsString sstr = NS_ConvertUTF8toUTF16(str);
-                finder->SetSearchString(PromiseFlatString(sstr).get());
-
-                PRBool rv;
-                finder->FindNext(&rv);
-                if (rv == PR_TRUE)
-                        return TRUE;
-        }
-
-        return FALSE;
-}
-
-extern "C" void
-gecko_utils_select_all(GtkMozEmbed *embed)
-{
-        nsCOMPtr<nsIWebBrowser> webBrowser;
-        gtk_moz_embed_get_nsIWebBrowser(embed, getter_AddRefs(webBrowser));
-
-        nsCOMPtr<nsIClipboardCommands> clipboard = do_GetInterface(webBrowser);
-        g_debug("GECKO_UTILS >>> select all");
-
-        if (!clipboard)
-                g_warning("GECKO_UTILS >>> could not get ClipboardCommands Interface.");
-        else
-                clipboard->SelectAll();
-}
-
-extern "C" gboolean
-gecko_utils_can_copy_selection(GtkMozEmbed *embed)
-{
-        nsCOMPtr<nsIWebBrowser> webBrowser;
-        gtk_moz_embed_get_nsIWebBrowser(embed, getter_AddRefs(webBrowser));
-
-        nsCOMPtr<nsIClipboardCommands> clipboard = do_GetInterface(webBrowser);
-
-        if (!clipboard) {
-                g_warning("GECKO_UTILS >>> could not get ClipboardCommands Interface.");
-                return FALSE;
-        } else {
-                PRBool rv;
-                clipboard->CanCopySelection(&rv);
-                return rv;
-        }
-}
-
-extern "C" void
-gecko_utils_copy_selection(GtkMozEmbed *embed)
-{
-        nsCOMPtr<nsIWebBrowser> webBrowser;
-        gtk_moz_embed_get_nsIWebBrowser(embed, getter_AddRefs(webBrowser));
-
-        nsCOMPtr<nsIClipboardCommands> clipboard = do_GetInterface(webBrowser);
-
-        if (!clipboard)
-                g_warning("GECKO_UTILS >>> could not get ClipboardCommands Interface.");
-        else
-                clipboard->CopySelection();
-}
-
-extern "C" gfloat
-gecko_utils_get_zoom(GtkMozEmbed *embed)
-{
-        nsCOMPtr<nsIWebBrowser>	webBrowser;
-        nsCOMPtr<nsIDOMWindow>  domWindow;
-        float zoom;
-
-        gtk_moz_embed_get_nsIWebBrowser(GTK_MOZ_EMBED(embed), getter_AddRefs(webBrowser));
-        webBrowser->GetContentDOMWindow(getter_AddRefs(domWindow));
-
-        if (!domWindow) {
-                g_warning("GECKO_UTILS >>> could not get DOMWindow.");
-                return 1.0;
-        }
-
-        domWindow->GetTextZoom(&zoom);
-
-        return zoom;
-}
-
-extern "C" void
-gecko_utils_set_zoom(GtkMozEmbed *embed, gfloat zoom)
-{
-        g_debug("GECKO_UTILS >>> set zoom %f", zoom);
-        nsCOMPtr<nsIWebBrowser>	webBrowser;
-        nsCOMPtr<nsIDOMWindow>  domWindow;
-
-        gtk_moz_embed_get_nsIWebBrowser(GTK_MOZ_EMBED(embed), getter_AddRefs(webBrowser));
-        webBrowser->GetContentDOMWindow(getter_AddRefs(domWindow));
-
-        if (!domWindow) {
-                g_warning("GECKO_UTILS >>> Could not get DOMWindow.");
-                return;
-        }
-
-        domWindow->SetTextZoom(zoom);
-}
-
-extern "C" void
-gecko_utils_set_charset(GtkMozEmbed *embed, const char *charset)
-{
-        nsCOMPtr<nsIWebBrowser> webBrowser;
-        gtk_moz_embed_get_nsIWebBrowser(embed, getter_AddRefs(webBrowser));
-
-        nsCOMPtr<nsIDocCharset> docCharset = do_GetInterface(webBrowser);
-        if (docCharset) {
-                g_debug("GECKO_UTILS >>> set docCharset to %s", charset);
-                g_strcmp0(charset, "Auto") ? docCharset->SetCharset(charset) : docCharset->SetCharset("");
-         }
-}
-
-extern "C" char *
-gecko_utils_get_charset(GtkMozEmbed *embed)
-{
-        nsCOMPtr<nsIWebBrowser> webBrowser;
-        gtk_moz_embed_get_nsIWebBrowser(embed, getter_AddRefs(webBrowser));
-
-        char *charset = NULL;
-
-        nsCOMPtr<nsIDocCharset> docCharset = do_GetInterface(webBrowser);
-        if (docCharset) {
-                docCharset->GetCharset(&charset);
-                g_debug("GECKO_UTILS >>> get docCharset : %s", charset);
-         }
-
-        return charset;
-}
diff -Nur chmsee-1.3.1.1/src/components/gecko-utils.h chmsee-1.3.1.1.n/src/components/gecko-utils.h
--- chmsee-1.3.1.1/src/components/gecko-utils.h	2011-01-16 21:48:42.000000000 +0800
+++ chmsee-1.3.1.1.n/src/components/gecko-utils.h	1970-01-01 08:00:00.000000000 +0800
@@ -1,70 +0,0 @@
-/*
- *  Copyright (C) 2010 Ji YongGang <jungleji@gmail.com>
- *
- *  ChmSee is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2, or (at your option)
- *  any later version.
-
- *  ChmSee is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *  GNU General Public License for more details.
-
- *  You should have received a copy of the GNU General Public License
- *  along with ChmSee; see the file COPYING.  If not, write to
- *  the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
- *  Boston, MA 02110-1301, USA.
- */
-
-/*
- * Copyright (C) 2004 Imendio AB
- * Copyright (C) 2004 Marco Pesenti Gritti
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License as
- * published by the Free Software Foundation; either version 2 of the
- * License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * General Public License for more details.
- *
- * You should have received a copy of the GNU General Public
- * License along with this program; if not, write to the
- * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
- * Boston, MA 02111-1307, USA.
- *
- */
-
-#ifndef __GECKO_UTILS_H__
-#define __GECKO_UTILS_H__
-
-#include <gtkmozembed.h>
-
-G_BEGIN_DECLS
-
-enum {
-        GECKO_PREF_FONT_VARIABLE,
-        GECKO_PREF_FONT_FIXED
-};
-
-gboolean gecko_utils_init(void);
-void gecko_utils_shutdown(void);
-gint gecko_utils_get_mouse_event_button(gpointer);
-gint gecko_utils_get_mouse_event_modifiers(gpointer);
-void gecko_utils_set_font(gint, const gchar *);
-void gecko_utils_select_all(GtkMozEmbed *);
-gboolean gecko_utils_can_copy_selection(GtkMozEmbed *);
-void gecko_utils_copy_selection(GtkMozEmbed *);
-gfloat gecko_utils_get_zoom(GtkMozEmbed *);
-void gecko_utils_set_zoom(GtkMozEmbed *, gfloat);
-gboolean gecko_utils_find(GtkMozEmbed *, const gchar *, gboolean, gboolean);
-
-void  gecko_utils_set_charset(GtkMozEmbed *, const char *);
-char *gecko_utils_get_charset(GtkMozEmbed *);
-
-G_END_DECLS
-
-#endif /* __GECKO_UTILS_H__ */
diff -Nur chmsee-1.3.1.1/src/components/html-gecko.c chmsee-1.3.1.1.n/src/components/html-gecko.c
--- chmsee-1.3.1.1/src/components/html-gecko.c	2011-01-16 21:48:42.000000000 +0800
+++ chmsee-1.3.1.1.n/src/components/html-gecko.c	1970-01-01 08:00:00.000000000 +0800
@@ -1,483 +0,0 @@
-/*
- *  Copyright (C) 2010 Ji YongGang <jungleji@gmail.com>
- *
- *  ChmSee is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2, or (at your option)
- *  any later version.
-
- *  ChmSee is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *  GNU General Public License for more details.
-
- *  You should have received a copy of the GNU General Public License
- *  along with ChmSee; see the file COPYING.  If not, write to
- *  the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
- *  Boston, MA 02110-1301, USA.
- */
-
-#include <string.h>
-#include <gtkmozembed.h>
-
-#include "html-gecko.h"
-#include "utils.h"
-#include "gecko-utils.h"
-
-typedef struct _CsHtmlGeckoPrivate CsHtmlGeckoPrivate;
-
-struct _CsHtmlGeckoPrivate {
-        GtkMozEmbed *gecko;
-        gchar       *render_name;
-        gchar       *current_url;
-};
-
-static void cs_html_gecko_class_init(CsHtmlGeckoClass *);
-static void cs_html_gecko_init(CsHtmlGecko *);
-static void cs_html_gecko_finalize(GObject *);
-
-static void gecko_title_cb(GtkMozEmbed *, CsHtmlGecko *);
-static void gecko_location_cb(GtkMozEmbed *, CsHtmlGecko *);
-static gboolean gecko_open_uri_cb(GtkMozEmbed *, const gchar *, CsHtmlGecko *);
-static gboolean gecko_mouse_click_cb(GtkMozEmbed *, gpointer, CsHtmlGecko *);
-static void gecko_link_message_cb(GtkMozEmbed *, CsHtmlGecko *);
-static void gecko_child_add_cb(GtkMozEmbed *, GtkWidget *, CsHtmlGecko *);
-static void gecko_child_remove_cb(GtkMozEmbed *, GtkWidget *, CsHtmlGecko *);
-static void gecko_child_grab_focus_cb(GtkWidget *, CsHtmlGecko *);
-
-/* Signals */
-enum {
-        TITLE_CHANGED,
-        LOCATION_CHANGED,
-        OPEN_URI,
-        CONTEXT_NORMAL,
-        CONTEXT_LINK,
-        OPEN_NEW_TAB,
-        LINK_MESSAGE,
-        LAST_SIGNAL
-};
-
-static gint signals[LAST_SIGNAL] = { 0 };
-
-#define CS_HTML_GECKO_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE((obj), CS_TYPE_HTML_GECKO, CsHtmlGeckoPrivate))
-
-/* GObject functions */
-
-G_DEFINE_TYPE (CsHtmlGecko, cs_html_gecko, GTK_TYPE_FRAME);
-
-static void
-cs_html_gecko_class_init(CsHtmlGeckoClass *klass)
-{
-        G_OBJECT_CLASS (klass)->finalize = cs_html_gecko_finalize;
-        g_type_class_add_private(klass, sizeof(CsHtmlGeckoPrivate));
-
-        signals[TITLE_CHANGED] =
-                g_signal_new ("title-changed",
-                              G_TYPE_FROM_CLASS (klass),
-                              G_SIGNAL_RUN_LAST,
-                              0,
-                              NULL, NULL,
-                              gtk_marshal_VOID__STRING,
-                              G_TYPE_NONE,
-                              1, G_TYPE_STRING);
-
-        signals[LOCATION_CHANGED] =
-                g_signal_new("location-changed",
-                             G_TYPE_FROM_CLASS (klass),
-                             G_SIGNAL_RUN_LAST,
-                             0,
-                             NULL, NULL,
-                             gtk_marshal_VOID__STRING,
-                             G_TYPE_NONE,
-                             1, G_TYPE_STRING);
-
-        signals[OPEN_URI] =
-                g_signal_new("open-uri",
-                             G_TYPE_FROM_CLASS (klass),
-                             G_SIGNAL_RUN_LAST,
-                             0,
-                             NULL, NULL,
-                             gtk_marshal_BOOLEAN__POINTER,
-                             G_TYPE_BOOLEAN,
-                             1, G_TYPE_POINTER);
-
-        signals[CONTEXT_NORMAL] =
-                g_signal_new("context-normal",
-                             G_TYPE_FROM_CLASS (klass),
-                             G_SIGNAL_RUN_LAST,
-                             0,
-                             NULL, NULL,
-                             gtk_marshal_VOID__VOID,
-                             G_TYPE_NONE,
-                             0);
-
-        signals[CONTEXT_LINK] =
-                g_signal_new("context-link",
-                             G_TYPE_FROM_CLASS (klass),
-                             G_SIGNAL_RUN_LAST,
-                             0,
-                             NULL, NULL,
-                             gtk_marshal_VOID__STRING,
-                             G_TYPE_NONE,
-                             1, G_TYPE_STRING);
-
-        signals[OPEN_NEW_TAB] =
-                g_signal_new("open-new-tab",
-                             G_TYPE_FROM_CLASS (klass),
-                             G_SIGNAL_RUN_LAST,
-                             0,
-                             NULL, NULL,
-                             gtk_marshal_VOID__STRING,
-                             G_TYPE_NONE,
-                             1, G_TYPE_STRING);
-
-        signals[LINK_MESSAGE] =
-                g_signal_new("link-message",
-                             G_TYPE_FROM_CLASS (klass),
-                             G_SIGNAL_RUN_LAST,
-                             0,
-                             NULL, NULL,
-                             gtk_marshal_VOID__STRING,
-                             G_TYPE_NONE,
-                             1, G_TYPE_STRING);
-}
-
-static void
-cs_html_gecko_init(CsHtmlGecko *html)
-{
-        CsHtmlGeckoPrivate *priv = CS_HTML_GECKO_GET_PRIVATE (html);
-        priv->gecko = GTK_MOZ_EMBED(gtk_moz_embed_new());
-        gtk_widget_show(GTK_WIDGET (priv->gecko));
-        priv->render_name = g_strdup("Mozilla Gecko");
-        priv->current_url = NULL;
-
-        gtk_frame_set_shadow_type(GTK_FRAME (html), GTK_SHADOW_NONE);
-        gtk_container_add(GTK_CONTAINER (html), GTK_WIDGET (priv->gecko));
-
-        g_signal_connect(G_OBJECT (priv->gecko),
-                         "title",
-                         G_CALLBACK (gecko_title_cb),
-                         html);
-        g_signal_connect(G_OBJECT (priv->gecko),
-                         "location",
-                         G_CALLBACK (gecko_location_cb),
-                         html);
-        g_signal_connect(G_OBJECT (priv->gecko),
-                         "open-uri",
-                         G_CALLBACK (gecko_open_uri_cb),
-                         html);
-        g_signal_connect(G_OBJECT (priv->gecko),
-                         "dom_mouse_click",
-                         G_CALLBACK (gecko_mouse_click_cb),
-                         html);
-        g_signal_connect(G_OBJECT (priv->gecko),
-                         "link_message",
-                         G_CALLBACK (gecko_link_message_cb),
-                         html);
-        g_signal_connect(G_OBJECT (priv->gecko),
-                         "add",
-                         G_CALLBACK (gecko_child_add_cb),
-                         html);
-        g_signal_connect(G_OBJECT (priv->gecko),
-                         "remove",
-                         G_CALLBACK (gecko_child_remove_cb),
-                         html);
-}
-
-static void
-cs_html_gecko_finalize(GObject *object)
-{
-        CsHtmlGeckoPrivate *priv = CS_HTML_GECKO_GET_PRIVATE (CS_HTML_GECKO (object));
-
-        g_free(priv->render_name);
-        g_free(priv->current_url);
-        G_OBJECT_CLASS (cs_html_gecko_parent_class)->finalize(object);
-}
-
-/* Callbacks */
-
-static void
-gecko_title_cb(GtkMozEmbed *embed, CsHtmlGecko *html)
-{
-        char *new_title = gtk_moz_embed_get_title(embed);
-        g_signal_emit(html, signals[TITLE_CHANGED], 0, new_title);
-        g_free(new_title);
-}
-
-static void
-gecko_location_cb(GtkMozEmbed *embed, CsHtmlGecko *html)
-{
-        gchar *location = gtk_moz_embed_get_location(embed);
-        g_debug("CS_HTML_GECKO >>> send location changed signal, location = %s", location);
-        g_signal_emit(html, signals[LOCATION_CHANGED], 0, location);
-        g_free(location);
-}
-
-static gboolean
-gecko_open_uri_cb(GtkMozEmbed *embed, const gchar *uri, CsHtmlGecko *html)
-{
-        gboolean ret_val = TRUE;
-
-        g_debug("CS_HTML_GECKO >>> send open-uri signal, uri = %s", uri);
-        g_signal_emit(html, signals[OPEN_URI], 0, uri, &ret_val);
-
-        return ret_val;
-}
-
-static gboolean
-gecko_mouse_click_cb(GtkMozEmbed *widget, gpointer dom_event, CsHtmlGecko *html)
-{
-        g_debug("CS_HTML_GECKO >>> mouse click callback");
-        CsHtmlGeckoPrivate *priv = CS_HTML_GECKO_GET_PRIVATE (html);
-        gint button = gecko_utils_get_mouse_event_button(dom_event);
-        gint mask = gecko_utils_get_mouse_event_modifiers(dom_event);
-
-        g_debug("CS_HTML_GECKO >>> mouse click callback, current_url = %s", priv->current_url);
-        if (button == 2 || (button == 1 && mask & GDK_CONTROL_MASK)) {
-                if (priv->current_url && strlen(priv->current_url)) {
-                        g_signal_emit(html, signals[OPEN_NEW_TAB], 0, priv->current_url);
-
-                        return TRUE;
-                }
-        } else if (button == 3) {
-                if (priv->current_url && strlen(priv->current_url))
-                        g_signal_emit(html, signals[CONTEXT_LINK], 0, priv->current_url);
-                else
-                        g_signal_emit(html, signals[CONTEXT_NORMAL], 0);
-
-                return TRUE;
-        }  else if (button == 1) {
-                if (priv->current_url && strlen(priv->current_url)) {
-                        char *scheme = g_uri_parse_scheme(priv->current_url);
-                        if (scheme && (!g_strcmp0(scheme, "http") || !g_strcmp0(scheme, "https"))) {
-                                GError *error = NULL;
-                                g_debug("CS_HTML_GECKO >>> mouse click callback, call gtk_show_uri = %s", priv->current_url);
-                                /* call default browser to show external link */
-                                gtk_show_uri(NULL, priv->current_url, gtk_get_current_event_time(), &error);
-
-                                if (error == NULL)
-                                        return TRUE;
-                        }
-                }
-        }
-
-        return FALSE;
-}
-
-static void
-gecko_link_message_cb(GtkMozEmbed *widget, CsHtmlGecko *html)
-{
-        CsHtmlGeckoPrivate *priv = CS_HTML_GECKO_GET_PRIVATE (html);
-
-        g_free(priv->current_url);
-        priv->current_url = gtk_moz_embed_get_link_message(widget);
-        g_signal_emit(html, signals[LINK_MESSAGE], 0, priv->current_url);
-}
-
-static void
-gecko_child_add_cb(GtkMozEmbed *embed, GtkWidget *child, CsHtmlGecko *html)
-{
-        g_debug("CS_HTML_GECKO >>> child add callback");
-        g_signal_connect(G_OBJECT (child),
-                         "grab-focus",
-                         G_CALLBACK (gecko_child_grab_focus_cb),
-                         html);
-}
-
-static void
-gecko_child_remove_cb(GtkMozEmbed *embed, GtkWidget *child, CsHtmlGecko *html)
-{
-        g_debug("CS_HTML_GECKO >>> child remove callback");
-        g_signal_handlers_disconnect_by_func(child, gecko_child_grab_focus_cb, html);
-}
-
-static void
-gecko_child_grab_focus_cb(GtkWidget *widget, CsHtmlGecko *html)
-{
-        g_debug("CS_HTML_GECKO >>> grab focus callback");
-
-        GdkEvent *event = gtk_get_current_event();
-
-        if (event == NULL)
-                g_signal_stop_emission_by_name(widget, "grab-focus");
-        else
-                gdk_event_free(event);
-}
-
-/* External functions */
-
-GtkWidget *
-cs_html_gecko_new(void)
-{
-        CsHtmlGecko *html = g_object_new(CS_TYPE_HTML_GECKO, NULL);
-
-        return GTK_WIDGET (html);
-}
-
-void
-cs_html_gecko_load_url(CsHtmlGecko *html, const gchar *url)
-{
-        g_return_if_fail(IS_CS_HTML_GECKO (html));
-        g_return_if_fail(url != NULL);
-
-        g_debug("CS_HTML_GECKO >>> load_url html = %p, uri = %s", html, url);
-        gtk_moz_embed_load_url(CS_HTML_GECKO_GET_PRIVATE (html)->gecko, url);
-}
-
-void
-cs_html_gecko_reload(CsHtmlGecko *html)
-{
-        g_return_if_fail(IS_CS_HTML_GECKO (html));
-
-        gtk_moz_embed_reload(CS_HTML_GECKO_GET_PRIVATE (html)->gecko, GTK_MOZ_EMBED_FLAG_RELOADNORMAL);
-}
-
-gboolean
-cs_html_gecko_can_go_forward(CsHtmlGecko *html)
-{
-        g_return_val_if_fail(IS_CS_HTML_GECKO (html), FALSE);
-
-        return gtk_moz_embed_can_go_forward(CS_HTML_GECKO_GET_PRIVATE (html)->gecko);
-}
-
-gboolean
-cs_html_gecko_can_go_back(CsHtmlGecko *html)
-{
-        g_return_val_if_fail(IS_CS_HTML_GECKO (html), FALSE);
-
-        return gtk_moz_embed_can_go_back(CS_HTML_GECKO_GET_PRIVATE (html)->gecko);
-}
-
-void
-cs_html_gecko_go_forward(CsHtmlGecko *html)
-{
-        g_return_if_fail(IS_CS_HTML_GECKO (html));
-
-        gtk_moz_embed_go_forward(CS_HTML_GECKO_GET_PRIVATE (html)->gecko);
-}
-
-void
-cs_html_gecko_go_back(CsHtmlGecko *html)
-{
-        g_return_if_fail(IS_CS_HTML_GECKO (html));
-
-        gtk_moz_embed_go_back(CS_HTML_GECKO_GET_PRIVATE (html)->gecko);
-}
-
-gchar *
-cs_html_gecko_get_title(CsHtmlGecko *html)
-{
-        g_return_val_if_fail(IS_CS_HTML_GECKO (html), NULL);
-
-        return gtk_moz_embed_get_title(CS_HTML_GECKO_GET_PRIVATE (html)->gecko);
-}
-
-gchar *
-cs_html_gecko_get_location(CsHtmlGecko *html)
-{
-        g_return_val_if_fail(IS_CS_HTML_GECKO (html), NULL);
-
-        return gtk_moz_embed_get_location(CS_HTML_GECKO_GET_PRIVATE (html)->gecko);
-}
-
-gboolean
-cs_html_gecko_can_copy_selection(CsHtmlGecko *html)
-{
-        g_return_val_if_fail(IS_CS_HTML_GECKO (html), FALSE);
-
-        return gecko_utils_can_copy_selection(CS_HTML_GECKO_GET_PRIVATE (html)->gecko);
-}
-
-void
-cs_html_gecko_copy_selection(CsHtmlGecko *html)
-{
-        g_return_if_fail(IS_CS_HTML_GECKO (html));
-
-        gecko_utils_copy_selection(CS_HTML_GECKO_GET_PRIVATE (html)->gecko);
-}
-
-void
-cs_html_gecko_select_all(CsHtmlGecko *html)
-{
-        g_return_if_fail(IS_CS_HTML_GECKO (html));
-
-        gecko_utils_select_all(CS_HTML_GECKO_GET_PRIVATE (html)->gecko);
-}
-
-gboolean
-cs_html_gecko_find(CsHtmlGecko *html, const gchar *sstr, gboolean backward, gboolean match_case)
-{
-        g_return_val_if_fail(IS_CS_HTML_GECKO (html), FALSE);
-
-        return gecko_utils_find(CS_HTML_GECKO_GET_PRIVATE (html)->gecko, sstr, backward, match_case);
-}
-
-void
-cs_html_gecko_increase_size(CsHtmlGecko *html)
-{
-        g_return_if_fail(IS_CS_HTML_GECKO (html));
-
-        CsHtmlGeckoPrivate *priv = CS_HTML_GECKO_GET_PRIVATE (html);
-
-        gfloat zoom = gecko_utils_get_zoom(priv->gecko);
-        zoom *= 1.2;
-
-        gecko_utils_set_zoom(priv->gecko, zoom);
-}
-
-void
-cs_html_gecko_reset_size(CsHtmlGecko *html)
-{
-        g_return_if_fail(IS_CS_HTML_GECKO (html));
-
-        gecko_utils_set_zoom(CS_HTML_GECKO_GET_PRIVATE (html)->gecko, 1.0);
-}
-
-void
-cs_html_gecko_decrease_size(CsHtmlGecko *html)
-{
-        g_return_if_fail(IS_CS_HTML_GECKO (html));
-
-        CsHtmlGeckoPrivate *priv = CS_HTML_GECKO_GET_PRIVATE (html);
-
-        gfloat zoom = gecko_utils_get_zoom(priv->gecko);
-        zoom /= 1.2;
-
-        gecko_utils_set_zoom(priv->gecko, zoom);
-}
-
-gboolean
-cs_html_gecko_init_system(void)
-{
-        g_message("CS_HTML_GECKO >>> init gecko system");
-        return gecko_utils_init();
-}
-
-void
-cs_html_gecko_shutdown_system()
-{
-        g_message("CS_HTML_GECKO >>> shutdown gecko system");
-        gecko_utils_shutdown();
-}
-
-void
-cs_html_gecko_set_variable_font(const gchar *font_name)
-{
-        g_debug("CS_HTML_GECKO >>> set variable font %s", font_name);
-        gecko_utils_set_font(GECKO_PREF_FONT_VARIABLE, font_name);
-}
-
-void
-cs_html_gecko_set_fixed_font(const gchar *font_name)
-{
-        g_debug("CS_HTML_GECKO >>> set fixed font %s", font_name);
-        gecko_utils_set_font(GECKO_PREF_FONT_FIXED, font_name);
-}
-
-void
-cs_html_gecko_set_charset(CsHtmlGecko *html, const gchar *charset)
-{
-        g_return_if_fail(IS_CS_HTML_GECKO (html));
-
-        gecko_utils_set_charset(CS_HTML_GECKO_GET_PRIVATE (html)->gecko, charset);
-}
diff -Nur chmsee-1.3.1.1/src/components/html-gecko.h chmsee-1.3.1.1.n/src/components/html-gecko.h
--- chmsee-1.3.1.1/src/components/html-gecko.h	2011-01-16 21:48:42.000000000 +0800
+++ chmsee-1.3.1.1.n/src/components/html-gecko.h	1970-01-01 08:00:00.000000000 +0800
@@ -1,83 +0,0 @@
-/*
- *  Copyright (C) 2010 Ji YongGang <jungleji@gmail.com>
- *
- *  ChmSee is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2, or (at your option)
- *  any later version.
-
- *  ChmSee is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *  GNU General Public License for more details.
-
- *  You should have received a copy of the GNU General Public License
- *  along with ChmSee; see the file COPYING.  If not, write to
- *  the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
- *  Boston, MA 02110-1301, USA.
- */
-
-#ifndef __CS_HTML_GECKO_H__
-#define __CS_HTML_GECKO_H__
-
-#include <glib-object.h>
-#include <gtk/gtk.h>
-
-G_BEGIN_DECLS
-
-#define CS_TYPE_HTML_GECKO        (cs_html_gecko_get_type())
-#define CS_HTML_GECKO(o)          (G_TYPE_CHECK_INSTANCE_CAST ((o), CS_TYPE_HTML_GECKO, CsHtmlGecko))
-#define CS_HTML_GECKO_CLASS(k)    (G_TYPE_CHECK_CLASS_CAST((k), CS_TYPE_HTML_GECKO, CsHtmlGeckoClass))
-#define IS_CS_HTML_GECKO(o)       (G_TYPE_CHECK_INSTANCE_TYPE ((o), CS_TYPE_HTML_GECKO))
-#define IS_CS_HTML_GECKO_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), CS_TYPE_HTML_GECKO))
-
-typedef struct _CsHtmlGecko        CsHtmlGecko;
-typedef struct _CsHtmlGeckoClass   CsHtmlGeckoClass;
-
-struct _CsHtmlGecko {
-        GtkFrame      frame;
-};
-
-struct _CsHtmlGeckoClass {
-        GtkFrameClass parent_class;
-
-        /* Signals */
-        void     (* title_changed)    (CsHtmlGecko *html, const gchar *title);
-        void     (* location_changed) (CsHtmlGecko *html, const gchar *location);
-        gboolean (* open_uri)         (CsHtmlGecko *html, const gchar *uri);
-        void     (* context_normal)   (CsHtmlGecko *html);
-        void     (* context_link)     (CsHtmlGecko *html, const gchar *link);
-        void     (* open_new_tab)     (CsHtmlGecko *html, const gchar *uri);
-        void     (* link_message)     (CsHtmlGecko *html, const gchar *link);
-};
-
-GType        cs_html_gecko_get_type(void);
-GtkWidget   *cs_html_gecko_new(void);
-void         cs_html_gecko_load_url(CsHtmlGecko *, const gchar *);
-void         cs_html_gecko_reload(CsHtmlGecko *);
-
-gboolean     cs_html_gecko_can_go_forward(CsHtmlGecko *);
-gboolean     cs_html_gecko_can_go_back(CsHtmlGecko *);
-void         cs_html_gecko_go_forward(CsHtmlGecko *);
-void         cs_html_gecko_go_back(CsHtmlGecko *);
-gchar       *cs_html_gecko_get_title(CsHtmlGecko *);
-gchar       *cs_html_gecko_get_location(CsHtmlGecko *);
-gboolean     cs_html_gecko_can_copy_selection(CsHtmlGecko *);
-void         cs_html_gecko_copy_selection(CsHtmlGecko *);
-void         cs_html_gecko_select_all(CsHtmlGecko *);
-void         cs_html_gecko_increase_size(CsHtmlGecko *);
-void         cs_html_gecko_reset_size(CsHtmlGecko *);
-void         cs_html_gecko_decrease_size(CsHtmlGecko *);
-gboolean     cs_html_gecko_find(CsHtmlGecko *, const gchar *, gboolean, gboolean);
-
-gboolean     cs_html_gecko_init_system(void);
-void         cs_html_gecko_shutdown_system(void);
-
-void         cs_html_gecko_set_variable_font(const gchar *);
-void         cs_html_gecko_set_fixed_font(const gchar *);
-
-void         cs_html_gecko_set_charset(CsHtmlGecko *, const gchar *);
-
-G_END_DECLS
-
-#endif /* !__CS_HTML_GECKO_H__ */
diff -Nur chmsee-1.3.1.1/src/components/html-webkit.c chmsee-1.3.1.1.n/src/components/html-webkit.c
--- chmsee-1.3.1.1/src/components/html-webkit.c	1970-01-01 08:00:00.000000000 +0800
+++ chmsee-1.3.1.1.n/src/components/html-webkit.c	2011-01-27 13:57:11.000000000 +0800
@@ -0,0 +1,522 @@
+/*
+ *  Copyright (C) 2010 Ji YongGang <jungleji@gmail.com>
+ *
+ *  ChmSee is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+
+ *  ChmSee is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+
+ *  You should have received a copy of the GNU General Public License
+ *  along with ChmSee; see the file COPYING.  If not, write to
+ *  the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+ *  Boston, MA 02110-1301, USA.
+ */
+
+#include <string.h>
+#include <webkit/webkit.h>
+
+#include "html-webkit.h"
+#include "utils.h"
+
+typedef struct _CsHtmlWebkitPrivate CsHtmlWebkitPrivate;
+
+struct _CsHtmlWebkitPrivate {
+        WebKitWebView *webkit;
+        GtkWidget     * scrolled;
+        gchar         *render_name;
+        gchar         *current_url;
+};
+
+static void cs_html_webkit_class_init(CsHtmlWebkitClass *);
+static void cs_html_webkit_init(CsHtmlWebkit *);
+static void cs_html_webkit_finalize(GObject *);
+static gboolean webkit_web_view_mouse_click_cb(WebKitWebView *, gpointer, CsHtmlWebkit *);
+static void webkit_web_view_hovering_over_link_cb (WebKitWebView*, const gchar*, const gchar*, CsHtmlWebkit*);
+static void webkit_web_view_load_committed_cb (WebKitWebView*, WebKitWebFrame*, CsHtmlWebkit*);
+static void webkit_title_cb (WebKitWebView*, WebKitWebFrame*, const gchar*, CsHtmlWebkit*);
+
+
+/* Signals */
+enum {
+        TITLE_CHANGED,
+        LOCATION_CHANGED,
+        OPEN_URI,
+        CONTEXT_NORMAL,
+        CONTEXT_LINK,
+        OPEN_NEW_TAB,
+        LINK_MESSAGE,
+        LAST_SIGNAL
+};
+
+static gint signals[LAST_SIGNAL] = { 0 };
+
+#define CS_HTML_WEBKIT_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE((obj), CS_TYPE_HTML_WEBKIT, CsHtmlWebkitPrivate))
+
+/* GObject functions */
+
+G_DEFINE_TYPE (CsHtmlWebkit, cs_html_webkit, GTK_TYPE_FRAME);
+
+static void
+cs_html_webkit_class_init(CsHtmlWebkitClass *klass)
+{
+        G_OBJECT_CLASS (klass)->finalize = cs_html_webkit_finalize;
+        g_type_class_add_private(klass, sizeof(CsHtmlWebkitPrivate));
+
+        signals[TITLE_CHANGED] =
+                g_signal_new ("title-changed",
+                              G_TYPE_FROM_CLASS (klass),
+                              G_SIGNAL_RUN_LAST,
+                              0,
+                              NULL, NULL,
+                              gtk_marshal_VOID__STRING,
+                              G_TYPE_NONE,
+                              1, G_TYPE_STRING);
+
+        signals[LOCATION_CHANGED] =
+                g_signal_new("location-changed",
+                             G_TYPE_FROM_CLASS (klass),
+                             G_SIGNAL_RUN_LAST,
+                             0,
+                             NULL, NULL,
+                             gtk_marshal_VOID__STRING,
+                             G_TYPE_NONE,
+                             1, G_TYPE_STRING);
+
+        signals[OPEN_URI] =
+                g_signal_new("open-uri",
+                             G_TYPE_FROM_CLASS (klass),
+                             G_SIGNAL_RUN_LAST,
+                             0,
+                             NULL, NULL,
+                             gtk_marshal_BOOLEAN__POINTER,
+                             G_TYPE_BOOLEAN,
+                             1, G_TYPE_POINTER);
+
+        signals[CONTEXT_NORMAL] =
+                g_signal_new("context-normal",
+                             G_TYPE_FROM_CLASS (klass),
+                             G_SIGNAL_RUN_LAST,
+                             0,
+                             NULL, NULL,
+                             gtk_marshal_VOID__VOID,
+                             G_TYPE_NONE,
+                             0);
+
+        signals[CONTEXT_LINK] =
+                g_signal_new("context-link",
+                             G_TYPE_FROM_CLASS (klass),
+                             G_SIGNAL_RUN_LAST,
+                             0,
+                             NULL, NULL,
+                             gtk_marshal_VOID__STRING,
+                             G_TYPE_NONE,
+                             1, G_TYPE_STRING);
+
+        signals[OPEN_NEW_TAB] =
+                g_signal_new("open-new-tab",
+                             G_TYPE_FROM_CLASS (klass),
+                             G_SIGNAL_RUN_LAST,
+                             0,
+                             NULL, NULL,
+                             gtk_marshal_VOID__STRING,
+                             G_TYPE_NONE,
+                             1, G_TYPE_STRING);
+
+        signals[LINK_MESSAGE] =
+                g_signal_new("link-message",
+                             G_TYPE_FROM_CLASS (klass),
+                             G_SIGNAL_RUN_LAST,
+                             0,
+                             NULL, NULL,
+                             gtk_marshal_VOID__STRING,
+                             G_TYPE_NONE,
+                             1, G_TYPE_STRING);
+}
+
+static void
+cs_html_webkit_init(CsHtmlWebkit *html)
+{
+        CsHtmlWebkitPrivate *priv = CS_HTML_WEBKIT_GET_PRIVATE (html);
+        priv->webkit = WEBKIT_WEB_VIEW(webkit_web_view_new());
+        priv->scrolled = gtk_scrolled_window_new(0,0);
+        gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (priv->scrolled),
+                                    GTK_POLICY_AUTOMATIC,
+                                    GTK_POLICY_AUTOMATIC);
+        GTK_WIDGET_SET_FLAGS (priv->scrolled, GTK_CAN_FOCUS);
+        gtk_container_add(GTK_CONTAINER (priv->scrolled), GTK_WIDGET(priv->webkit));
+
+        gtk_widget_show_all(GTK_WIDGET (priv->scrolled));
+        gtk_widget_show_all(GTK_WIDGET (priv->webkit));
+        priv->render_name = g_strdup("Webkit");
+        priv->current_url = NULL;
+
+        gtk_frame_set_shadow_type(GTK_FRAME (html), GTK_SHADOW_NONE);
+        gtk_container_add(GTK_CONTAINER (html), GTK_WIDGET (priv->scrolled));
+
+        g_signal_connect(G_OBJECT (priv->webkit),
+                         "title-changed",
+                         G_CALLBACK (webkit_title_cb),
+                         html);
+        g_signal_connect(G_OBJECT (priv->webkit),
+                         "button-press-event",
+                         G_CALLBACK (webkit_web_view_mouse_click_cb),
+                         html);
+        g_signal_connect(G_OBJECT (priv->webkit),
+                         "hovering-over-link",
+                         G_CALLBACK (webkit_web_view_hovering_over_link_cb),
+                         html);
+        g_signal_connect(G_OBJECT (priv->webkit),
+                         "load-committed",
+                         G_CALLBACK (webkit_web_view_load_committed_cb),
+                         html);
+}
+
+static void
+cs_html_webkit_finalize(GObject *object)
+{
+        CsHtmlWebkitPrivate *priv = CS_HTML_WEBKIT_GET_PRIVATE (CS_HTML_WEBKIT (object));
+
+        g_free(priv->render_name);
+        g_free(priv->current_url);
+        G_OBJECT_CLASS (cs_html_webkit_parent_class)->finalize(object);
+}
+
+/* Callbacks */
+
+
+static void 
+webkit_title_cb (WebKitWebView*  web_view,
+                                  WebKitWebFrame* web_frame,
+                                  const gchar*    title,
+                                  CsHtmlWebkit*     html)
+{
+   const gchar *uri;
+   uri = webkit_web_frame_get_uri(web_frame);
+   g_signal_emit(html, signals[TITLE_CHANGED], 0, g_strdup(title));
+   g_signal_emit(html, signals[LOCATION_CHANGED], 0,g_strdup(uri) );
+}
+
+static void
+webkit_web_view_load_committed_cb (WebKitWebView*  web_view,
+                                 WebKitWebFrame* web_frame,
+                                 CsHtmlWebkit*     html)
+{
+        g_object_freeze_notify (G_OBJECT (html));
+        const gchar *uri =  webkit_web_frame_get_uri(web_frame);
+        g_return_if_fail (uri != NULL);
+        //g_signal_emit(html, signals[OPEN_URI], 0, g_strdup(uri));
+        if (CS_HTML_WEBKIT_GET_PRIVATE (html)->current_url != NULL) {
+                g_free(CS_HTML_WEBKIT_GET_PRIVATE (html)->current_url);
+                CS_HTML_WEBKIT_GET_PRIVATE (html)->current_url = NULL;
+                g_signal_emit(html, signals[LINK_MESSAGE], 0, "");
+        }
+        g_object_thaw_notify (G_OBJECT (html));
+
+}
+
+#define KEYS_MODIFIER_MASK (GDK_SHIFT_MASK | GDK_CONTROL_MASK \
+    | GDK_MOD1_MASK | GDK_META_MASK | GDK_SUPER_MASK | GDK_HYPER_MASK )
+
+static gboolean
+webkit_web_view_mouse_click_cb(WebKitWebView *widget, gpointer dom_event, CsHtmlWebkit *html)
+{
+        GdkEventButton* event = dom_event;
+
+        gint button=event->button;
+        gint mask = event->state & KEYS_MODIFIER_MASK;
+
+        if (button == 2 || (button == 1 && mask & GDK_CONTROL_MASK)) {
+                if (CS_HTML_WEBKIT_GET_PRIVATE (html)->current_url) {
+                        g_signal_emit(html, signals[OPEN_NEW_TAB], 0, CS_HTML_WEBKIT_GET_PRIVATE (html)->current_url);
+
+                        return TRUE;
+                }
+        } else if (button == 3) {
+                if (CS_HTML_WEBKIT_GET_PRIVATE (html)->current_url)
+                        g_signal_emit(html, signals[CONTEXT_LINK], 0, CS_HTML_WEBKIT_GET_PRIVATE (html)->current_url);
+                else
+                        g_signal_emit(html, signals[CONTEXT_NORMAL], 0);
+
+                return TRUE;
+        }
+
+        return FALSE;
+}
+
+static void
+webkit_web_view_hovering_over_link_cb (WebKitWebView* web_view,
+                                       const gchar*   tooltip,
+                                       const gchar*   link_uri,
+                                       CsHtmlWebkit* html)
+{
+    g_free(CS_HTML_WEBKIT_GET_PRIVATE (html)->current_url);
+    CS_HTML_WEBKIT_GET_PRIVATE (html)->current_url = g_strdup(link_uri);
+
+    if(CS_HTML_WEBKIT_GET_PRIVATE (html)->current_url==NULL)
+        return;
+
+    g_signal_emit(html, signals[LINK_MESSAGE], 0, CS_HTML_WEBKIT_GET_PRIVATE (html)->current_url);
+    if (CS_HTML_WEBKIT_GET_PRIVATE (html)->current_url[0] == '\0') {
+        g_free(CS_HTML_WEBKIT_GET_PRIVATE (html)->current_url);
+        CS_HTML_WEBKIT_GET_PRIVATE (html)->current_url = NULL;
+    }
+    return ;
+
+}
+
+
+/* External functions */
+
+GtkWidget *
+cs_html_webkit_new(void)
+{
+        CsHtmlWebkit *html = g_object_new(CS_TYPE_HTML_WEBKIT, NULL);
+
+        return GTK_WIDGET (html);
+}
+
+void
+cs_html_webkit_load_url(CsHtmlWebkit *html, const gchar *url)
+{
+        g_return_if_fail(IS_CS_HTML_WEBKIT (html));
+        g_return_if_fail(url != NULL);
+
+        g_debug("CS_HTML_WEBKIT >>> load_url html = %p, uri = %s", html, url);
+        webkit_web_view_open(CS_HTML_WEBKIT_GET_PRIVATE (html)->webkit, url);
+}
+
+void
+cs_html_webkit_reload(CsHtmlWebkit *html)
+{
+        g_return_if_fail(IS_CS_HTML_WEBKIT (html));
+
+        webkit_web_view_reload(CS_HTML_WEBKIT_GET_PRIVATE (html)->webkit);
+}
+
+gboolean
+cs_html_webkit_can_go_forward(CsHtmlWebkit *html)
+{
+        g_return_val_if_fail(IS_CS_HTML_WEBKIT (html), FALSE);
+
+        return webkit_web_view_can_go_forward(CS_HTML_WEBKIT_GET_PRIVATE (html)->webkit);
+}
+
+gboolean
+cs_html_webkit_can_go_back(CsHtmlWebkit *html)
+{
+        g_return_val_if_fail(IS_CS_HTML_WEBKIT (html), FALSE);
+
+        return webkit_web_view_can_go_back(CS_HTML_WEBKIT_GET_PRIVATE (html)->webkit);
+}
+
+void
+cs_html_webkit_go_forward(CsHtmlWebkit *html)
+{
+        g_return_if_fail(IS_CS_HTML_WEBKIT (html));
+
+        webkit_web_view_go_forward(CS_HTML_WEBKIT_GET_PRIVATE (html)->webkit);
+}
+
+void
+cs_html_webkit_go_back(CsHtmlWebkit *html)
+{
+        g_return_if_fail(IS_CS_HTML_WEBKIT (html));
+
+        webkit_web_view_go_back(CS_HTML_WEBKIT_GET_PRIVATE (html)->webkit);
+}
+
+gchar *
+cs_html_webkit_get_title(CsHtmlWebkit *html)
+{
+        g_return_val_if_fail(IS_CS_HTML_WEBKIT (html), NULL);
+
+        WebKitWebFrame *web_frame;
+        web_frame = webkit_web_view_get_main_frame (CS_HTML_WEBKIT_GET_PRIVATE (html)->webkit);
+        gchar *web_view_title=NULL;
+        if(web_frame)
+            web_view_title = g_strdup(webkit_web_frame_get_title (web_frame));
+
+        return web_view_title;
+}
+
+gchar *
+cs_html_webkit_get_location(CsHtmlWebkit *html)
+{
+        g_return_val_if_fail(IS_CS_HTML_WEBKIT (html), NULL);
+
+        WebKitWebFrame *web_frame;
+        web_frame = webkit_web_view_get_main_frame (CS_HTML_WEBKIT_GET_PRIVATE (html)->webkit);
+        gchar *uri = g_strdup(webkit_web_frame_get_uri(web_frame));
+        return uri;
+}
+
+gboolean
+cs_html_webkit_can_copy_selection(CsHtmlWebkit *html)
+{
+        g_return_val_if_fail(IS_CS_HTML_WEBKIT (html), FALSE);
+
+        return webkit_web_view_can_copy_clipboard(CS_HTML_WEBKIT_GET_PRIVATE (html)->webkit);
+}
+
+void
+cs_html_webkit_copy_selection(CsHtmlWebkit *html)
+{
+        g_return_if_fail(IS_CS_HTML_WEBKIT (html));
+        GtkWidget *widget = GTK_WIDGET(CS_HTML_WEBKIT_GET_PRIVATE (html)->webkit);
+        if (G_LIKELY (widget) && g_signal_lookup ("copy-clipboard", G_OBJECT_TYPE (widget)))
+            g_signal_emit_by_name (widget, "copy-clipboard");
+}
+
+void
+cs_html_webkit_select_all(CsHtmlWebkit *html)
+{
+        g_return_if_fail(IS_CS_HTML_WEBKIT (html));
+    GtkWidget *widget = GTK_WIDGET(CS_HTML_WEBKIT_GET_PRIVATE (html)->webkit);
+    if (GTK_IS_EDITABLE (widget))
+        gtk_editable_select_region (GTK_EDITABLE (widget), 0, -1);
+    else if (g_signal_lookup ("select-all", G_OBJECT_TYPE (widget)))
+    {
+        if (GTK_IS_TEXT_VIEW (widget))
+            g_signal_emit_by_name (widget, "select-all", TRUE);
+        else if (GTK_IS_TREE_VIEW (widget))
+        {
+            gboolean dummy;
+            g_signal_emit_by_name (widget, "select-all", &dummy);
+        }
+        else
+            g_signal_emit_by_name (widget, "select-all");
+    }
+
+}
+
+gboolean
+cs_html_webkit_find(CsHtmlWebkit *html, const gchar *sstr, gboolean backward, gboolean match_case)
+{
+        g_return_val_if_fail(IS_CS_HTML_WEBKIT (html), FALSE);
+
+        return webkit_web_view_search_text (CS_HTML_WEBKIT_GET_PRIVATE (html)->webkit,sstr,match_case,backward,TRUE);
+}
+
+void
+cs_html_webkit_increase_size(CsHtmlWebkit *html)
+{
+        g_return_if_fail(IS_CS_HTML_WEBKIT (html));
+
+        CsHtmlWebkitPrivate *priv = CS_HTML_WEBKIT_GET_PRIVATE (html);
+        gfloat zoom = webkit_web_view_get_zoom_level(priv->webkit);
+        zoom *= 1.2;
+        webkit_web_view_set_zoom_level(priv->webkit,zoom);
+}
+
+void
+cs_html_webkit_reset_size(CsHtmlWebkit *html)
+{
+        g_return_if_fail(IS_CS_HTML_WEBKIT (html));
+        CsHtmlWebkitPrivate *priv = CS_HTML_WEBKIT_GET_PRIVATE (html);
+        webkit_web_view_set_zoom_level(priv->webkit,1.0);
+}
+
+void
+cs_html_webkit_decrease_size(CsHtmlWebkit *html)
+{
+        g_return_if_fail(IS_CS_HTML_WEBKIT (html));
+
+        CsHtmlWebkitPrivate *priv = CS_HTML_WEBKIT_GET_PRIVATE (html);
+
+        gfloat zoom = webkit_web_view_get_zoom_level(priv->webkit);
+        zoom /= 1.2;
+        webkit_web_view_set_zoom_level(priv->webkit,zoom);
+}
+
+gboolean
+cs_html_webkit_init_system(void)
+{
+        g_message("CS_HTML_WEBKIT >>> init webkit system");
+        return TRUE;
+}
+
+void
+cs_html_webkit_shutdown_system()
+{
+        g_message("CS_HTML_WEBKIT >>> shutdown webkit system");
+}
+
+static gboolean
+split_font_string(const gchar *font_name, gchar **name, gint *size)
+{
+    PangoFontDescription *desc;
+    PangoFontMask         mask;
+    gboolean              retval = FALSE;
+
+    if (font_name == NULL) {
+        return FALSE;
+    }
+
+    mask = (PangoFontMask) (PANGO_FONT_MASK_FAMILY | PANGO_FONT_MASK_SIZE);
+
+    desc = pango_font_description_from_string(font_name);    if (!desc) {
+        return FALSE;
+    }
+
+    if ((pango_font_description_get_set_fields(desc) & mask) == mask) {
+        *size = PANGO_PIXELS(pango_font_description_get_size (desc));
+        *name = g_strdup(pango_font_description_get_family (desc));
+        retval = TRUE;
+    }
+
+    pango_font_description_free(desc);
+
+    return retval;
+}
+
+void
+cs_html_webkit_set_variable_font(CsHtmlWebkit *html,const gchar *font_name)
+{
+        g_return_if_fail(IS_CS_HTML_WEBKIT (html));
+    g_debug("CS_HTML_WEBKIT >>> set variable font %s", font_name);
+    gint size;
+    gchar *name;
+    split_font_string(font_name,&name,&size);
+
+    CsHtmlWebkitPrivate *priv = CS_HTML_WEBKIT_GET_PRIVATE (html);
+    WebKitWebSettings *settings;
+    settings = webkit_web_view_get_settings (WEBKIT_WEB_VIEW (priv->webkit));
+    g_object_set (settings,
+            "default-font-family", name,
+            "default-font-size", (guint) size,
+            NULL);
+}
+
+void
+cs_html_webkit_set_fixed_font(CsHtmlWebkit *html,const gchar *font_name)
+{
+        g_return_if_fail(IS_CS_HTML_WEBKIT (html));
+    g_debug("CS_HTML_WEBKIT >>> set fixed font %s", font_name);
+    gint size;
+    gchar *name;
+    split_font_string(font_name,&name,&size);
+    CsHtmlWebkitPrivate *priv = CS_HTML_WEBKIT_GET_PRIVATE (html);
+    WebKitWebSettings *settings;
+    settings = webkit_web_view_get_settings (WEBKIT_WEB_VIEW (priv->webkit));
+    g_object_set (settings,
+            "monospace-font-family", name,
+            "default-monospace-font-size", (guint) size,
+            NULL);
+
+}
+
+void
+cs_html_webkit_set_charset(CsHtmlWebkit *html, const gchar *charset)
+{
+    g_return_if_fail(IS_CS_HTML_WEBKIT (html));
+    CsHtmlWebkitPrivate *priv = CS_HTML_WEBKIT_GET_PRIVATE (html);
+    if(strcmp(charset,"Auto") == 0) //auto
+        g_object_set(priv->webkit,"custom-encoding",NULL,NULL);
+    else
+        g_object_set(priv->webkit,"custom-encoding",charset,NULL);
+}
diff -Nur chmsee-1.3.1.1/src/components/html-webkit.h chmsee-1.3.1.1.n/src/components/html-webkit.h
--- chmsee-1.3.1.1/src/components/html-webkit.h	1970-01-01 08:00:00.000000000 +0800
+++ chmsee-1.3.1.1.n/src/components/html-webkit.h	2011-01-27 13:56:57.000000000 +0800
@@ -0,0 +1,83 @@
+/*
+ *  Copyright (C) 2010 Ji YongGang <jungleji@gmail.com>
+ *
+ *  ChmSee is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+
+ *  ChmSee is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+
+ *  You should have received a copy of the GNU General Public License
+ *  along with ChmSee; see the file COPYING.  If not, write to
+ *  the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+ *  Boston, MA 02110-1301, USA.
+ */
+
+#ifndef __CS_HTML_WEBKIT_H__
+#define __CS_HTML_WEBKIT_H__
+
+#include <glib-object.h>
+#include <gtk/gtk.h>
+
+G_BEGIN_DECLS
+
+#define CS_TYPE_HTML_WEBKIT        (cs_html_webkit_get_type())
+#define CS_HTML_WEBKIT(o)          (G_TYPE_CHECK_INSTANCE_CAST ((o), CS_TYPE_HTML_WEBKIT, CsHtmlWebkit))
+#define CS_HTML_WEBKIT_CLASS(k)    (G_TYPE_CHECK_CLASS_CAST((k), CS_TYPE_HTML_WEBKIT, CsHtmlWebkitClass))
+#define IS_CS_HTML_WEBKIT(o)       (G_TYPE_CHECK_INSTANCE_TYPE ((o), CS_TYPE_HTML_WEBKIT))
+#define IS_CS_HTML_WEBKIT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), CS_TYPE_HTML_WEBKIT))
+
+typedef struct _CsHtmlWebkit        CsHtmlWebkit;
+typedef struct _CsHtmlWebkitClass   CsHtmlWebkitClass;
+
+struct _CsHtmlWebkit {
+        GtkFrame      frame;
+};
+
+struct _CsHtmlWebkitClass {
+        GtkFrameClass parent_class;
+
+        /* Signals */
+        void     (* title_changed)    (CsHtmlWebkit *html, const gchar *title);
+        void     (* location_changed) (CsHtmlWebkit *html, const gchar *location);
+        gboolean (* open_uri)         (CsHtmlWebkit *html, const gchar *uri);
+        void     (* context_normal)   (CsHtmlWebkit *html);
+        void     (* context_link)     (CsHtmlWebkit *html, const gchar *link);
+        void     (* open_new_tab)     (CsHtmlWebkit *html, const gchar *uri);
+        void     (* link_message)     (CsHtmlWebkit *html, const gchar *link);
+};
+
+GType        cs_html_webkit_get_type(void);
+GtkWidget   *cs_html_webkit_new(void);
+void         cs_html_webkit_load_url(CsHtmlWebkit *, const gchar *);
+void         cs_html_webkit_reload(CsHtmlWebkit *);
+
+gboolean     cs_html_webkit_can_go_forward(CsHtmlWebkit *);
+gboolean     cs_html_webkit_can_go_back(CsHtmlWebkit *);
+void         cs_html_webkit_go_forward(CsHtmlWebkit *);
+void         cs_html_webkit_go_back(CsHtmlWebkit *);
+gchar       *cs_html_webkit_get_title(CsHtmlWebkit *);
+gchar       *cs_html_webkit_get_location(CsHtmlWebkit *);
+gboolean     cs_html_webkit_can_copy_selection(CsHtmlWebkit *);
+void         cs_html_webkit_copy_selection(CsHtmlWebkit *);
+void         cs_html_webkit_select_all(CsHtmlWebkit *);
+void         cs_html_webkit_increase_size(CsHtmlWebkit *);
+void         cs_html_webkit_reset_size(CsHtmlWebkit *);
+void         cs_html_webkit_decrease_size(CsHtmlWebkit *);
+gboolean     cs_html_webkit_find(CsHtmlWebkit *, const gchar *, gboolean, gboolean);
+
+gboolean     cs_html_webkit_init_system(void);
+void         cs_html_webkit_shutdown_system(void);
+
+void         cs_html_webkit_set_variable_font(CsHtmlWebkit *,const gchar *);
+void         cs_html_webkit_set_fixed_font(CsHtmlWebkit *,const gchar *);
+
+void         cs_html_webkit_set_charset(CsHtmlWebkit *, const gchar *);
+
+G_END_DECLS
+
+#endif /* !__CS_HTML_WEBKIT_H__ */
